(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2461],{76923:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/styles/style",function(){return s(21285)}])},21285:function(e,n,s){"use strict";s.r(n);var t=s(85893),o=s(11151),r=s(34940),l=s(25263);let i=(0,r.A)(l.us.StyleProp);function c(e){let n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",a:"a",pre:"pre"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"style-prop",children:"Style prop"}),"\n",(0,t.jsxs)(n.p,{children:["All Mantine components that have root element support ",(0,t.jsx)(n.code,{children:"style"})," prop.\nIt works similar to React ",(0,t.jsx)(n.code,{children:"style"})," prop, but with some additional features."]}),"\n",(0,t.jsx)(n.h2,{id:"style-object",children:"Style object"}),"\n",(0,t.jsxs)(n.p,{children:["You can pass a style object to the ",(0,t.jsx)(n.code,{children:"style"})," prop – in this case it works the same way\nas React ",(0,t.jsx)(n.code,{children:"style"})," prop. You can use Mantine ",(0,t.jsx)(n.a,{href:"/styles/css-variables",children:"CSS variables"})," in style object\nthe same way as in ",(0,t.jsx)(n.a,{href:"/styles/css-modules",children:".css files"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Box, rem } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <Box\n      style={{\n        color: 'var(--mantine-color-red-5)',\n        fontSize: rem(12),\n      }}\n    />\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"style-function",children:"Style function"}),"\n",(0,t.jsxs)(n.p,{children:["You can pass a style function to the ",(0,t.jsx)(n.code,{children:"style"})," prop – in this case it will be called with ",(0,t.jsx)(n.a,{href:"/theming/theme-object/",children:"theme"}),".\nIt is useful when you need to access ",(0,t.jsx)(n.a,{href:"/theming/theme-object/",children:"theme"})," properties that are not exposed as ",(0,t.jsx)(n.a,{href:"/styles/css-variables",children:"CSS variables"}),",\nfor example, properties from ",(0,t.jsx)(n.code,{children:"theme.other"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Box } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <Box\n      style={(theme) => ({\n        color: theme.colors.red[5],\n        fontSize: theme.fontSizes.xs,\n      })}\n    />\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"styles-array",children:"Styles array"}),"\n",(0,t.jsxs)(n.p,{children:["You can pass an array of style objects and/or functions to ",(0,t.jsx)(n.code,{children:"style"})," prop – in this case, all styles will be merged into one object.\nIt is useful when you want to create a wrapper around Mantine component, add inline styles and keep the option to pass\n",(0,t.jsx)(n.code,{children:"style"})," prop to it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Box, MantineStyleProp } from '@mantine/core';\n\ninterface DemoProps {\n  style?: MantineStyleProp;\n}\n\nfunction Demo({ style }: DemoProps) {\n  return <Box style={[{ color: 'red' }, style]} />;\n}\n"})})]})}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(i,Object.assign({},e,{children:(0,t.jsx)(c,e)}))}}},function(e){e.O(0,[5664,9341,4831,9774,2888,179],function(){return e(e.s=76923)}),_N_E=e.O()}]);